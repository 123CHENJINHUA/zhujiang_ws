# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'closethedoor.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(863, 464)
        Dialog.setMinimumSize(QtCore.QSize(863, 464))
        Dialog.setMaximumSize(QtCore.QSize(863, 464))
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(260, 230, 361, 61))
        self.label_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_3.setStyleSheet("QLabel {\n"
"    color: rgba(37, 37, 37, 120);                  /* 略浅于主文本 */\n"
"    font-size: 20px;\n"
"    font-weight: normal;\n"
"    font-family: \'Microsoft YaHei\';\n"
"    background: transparent;\n"
"}\n"
"")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.label = QtWidgets.QLabel(Dialog)
        # 调整label的位置和尺寸以适应更大的GIF
        self.label.setGeometry(QtCore.QRect(330, 30, 200, 180))
        self.label.setMinimumSize(QtCore.QSize(200, 180))
        self.label.setMaximumSize(QtCore.QSize(200, 180))
        self.label.setText("")
        self.label.setAlignment(QtCore.Qt.AlignCenter)  # 添加居中对齐
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(250, 310, 371, 60))
        self.pushButton_2.setMinimumSize(QtCore.QSize(140, 54))
        self.pushButton_2.setMaximumSize(QtCore.QSize(400, 60))
        self.pushButton_2.setStyleSheet("QPushButton {\n"
"    background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #61A9FF, stop:1 #182490);\n"
"    color: #FFF;\n"
"    border-radius: 16px;\n"
"    font-size: 24px;\n"
"    font-family: \'Microsoft YaHei\';\n"
"    font-weight: bold;\n"
"    min-width: 140px;\n"
"    min-height: 54px;\n"
"}\n"
"QPushButton:pressed {\n"
"    background: #f0f6ff;\n"
"}\n"
"")
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(280, 180, 321, 61))
        self.label_2.setStyleSheet("QLabel {\n"
"    color:  rgb(37, 37, 37);\n"
"    font-size: 38px;\n"
"    font-weight: bold;\n"
"    font-family: \'Microsoft YaHei\';\n"
"    background: transparent;\n"
"}\n"
"")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(780, 30, 26, 26))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap(":/icons/icons/CustomerService.png"))
        self.label_4.setScaledContents(True)
        self.label_4.setStyleSheet("background-color: white;")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(743, 60, 100, 15))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(7)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("QLabel{\n"
" color: rgba(37, 37, 37, 150);\n"
" background-color: white;\n"
"}")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label_3.setText(_translate("Dialog", "仓门已为您打开"))
        self.pushButton_2.setText(_translate("Dialog", "确认取件，关闭仓门"))
        self.label_2.setText(_translate("Dialog", "请取出包裹"))
        self.label_5.setText(_translate("Dialog", "联系客服"))


class ClosethedoorDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, comm_node=None):
        super().__init__(parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.comm_node = comm_node
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        # 其他初始化代码...

        # 设置无边框窗口
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Dialog)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置透明背景以显示圆角

        # 连接按钮点击事件
        self.ui.pushButton_2.clicked.connect(self.custom_close)
        self.ui.label_4.mousePressEvent = self.contact_customer_service
        self.ui.label_5.mousePressEvent = self.contact_customer_service
        
        # 添加阴影效果使圆角更明显
        shadow = QtWidgets.QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(15)
        shadow.setColor(QtGui.QColor(0, 0, 0, 80))
        shadow.setOffset(0, 0)
        self.setGraphicsEffect(shadow)
        
        # 如果有父窗口，在初始化时就定位
        if parent:
            self.position_dialog()
            
        # 设置GIF动画
        self.setup_gif_animation()

        # 添加30秒自动关闭定时器
        self.auto_close_timer = QtCore.QTimer(self)
        self.auto_close_timer.timeout.connect(self.custom_close)
        self.auto_close_timer.setSingleShot(True)  # 只执行一次
        self.auto_close_timer.start(30000)  # 30秒 = 30000毫秒

    def custom_close(self):
        # 停止自动关闭定时器
        if hasattr(self, 'auto_close_timer'):
            self.auto_close_timer.stop()
        # 执行关闭前的逻辑
        if self.comm_node:
            self.comm_node.pickup_result = True
        self.close()
    
    def setup_gif_animation(self):
        """设置GIF动画，并调整其尺寸"""
        try:
            self.movie = QtGui.QMovie(":/icons/icons/package_out.gif")
            if self.movie.isValid():
                # 设置缓存模式提高性能
                self.movie.setCacheMode(QtGui.QMovie.CacheAll)
                
                # 手动指定GIF尺寸为更大的尺寸
                self.movie.setScaledSize(QtCore.QSize(200, 180))
                
                # 将QMovie设置到label
                self.ui.label.setMovie(self.movie)
                # 开始播放动画
                self.movie.start()
            else:
                print("GIF 文件无效")
        except Exception as e:
            print(f"设置 GIF 动画时出错: {e}")
    
    def position_dialog(self):
        """定位对话框在父窗口中央"""
        if self.parent():
            parent_geometry = self.parent().geometry()
            x = parent_geometry.x() + (parent_geometry.width() - self.width()) // 2
            y = parent_geometry.y() + (parent_geometry.height() - self.height()) // 2
            self.move(x, y)
    
    def paintEvent(self, event):
        """重写绘制事件，确保圆角效果"""
        painter = QtGui.QPainter(self)
        painter.setRenderHint(QtGui.QPainter.Antialiasing)  # 抗锯齿
        
        # 创建圆角矩形路径
        path = QtGui.QPainterPath()
        rect = QtCore.QRectF(self.rect())
        path.addRoundedRect(rect, 18, 18)
        
        # 填充白色背景
        painter.fillPath(path, QtGui.QColor(255, 255, 255))
    
    def showEvent(self, event):
        """在显示对话框时调整位置"""
        super().showEvent(event)
        # 在显示时再次调用定位方法，确保位置正确
        self.position_dialog()
        
        # 确保GIF动画正在播放
        if hasattr(self, 'movie') and self.movie.state() != QtGui.QMovie.Running:
            self.movie.start()
    
    def reset_customer_service_label(self):
        self.ui.label_5.setText("联系客服")
        self.ui.label_5.setStyleSheet("""
            QLabel{
                color: rgba(37, 37, 37, 150);
                background-color: white;
            }
        """)
    
    def contact_customer_service(self, event):
        # 显示联系客服的消息
        self.ui.label_5.setText("400-123-4567")
        self.ui.label_5.setStyleSheet("""
            QLabel{
                color: #4285f4;
                background-color: white;
                font-weight: bold;
            }
        """)
        # 5秒后恢复原样
        QtCore.QTimer.singleShot(5000, self.reset_customer_service_label)
        


# 如果需要单独测试此对话框
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    
    # 创建一个主窗口作为父窗口
    main_window = QtWidgets.QMainWindow()
    main_window.setGeometry(100, 100, 1000, 600)
    main_window.show()
    
    # 创建并显示对话框
    dialog = ClosethedoorDialog(main_window)
    dialog.show()
    
    sys.exit(app.exec_())
